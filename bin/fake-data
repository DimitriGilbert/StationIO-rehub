#!/bin/bash
# @parseArger-begin
# @parseArger-help "I send an SOS to the world" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
# @parseArger-declarations
# @parseArger opt room "specify room" --default-value "main"
# @parseArger opt sensor "specify sensor" --default-value "sht21"
# @parseArger opt mesure "specify mesure" --default-value "temperature"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
# OPTIONALS ARGUMENTS
_arg_room="main"
_arg_sensor="sht21"
_arg_mesure="temperature"
# FLAGS
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "I send an SOS to the world:"
	echo -e "	--room <room>: specify room [default: ' main ']"
	echo -e "	--sensor <sensor>: specify sensor [default: ' sht21 ']"
	echo -e "	--mesure <mesure>: specify mesure [default: ' temperature ']"
	echo -e "Usage :
	$0 [--room <value>] [--sensor <value>] [--mesure <value>]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:"0"}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="[0;31m";
				;;
			-2)
				_arg_COLOR="[0;33m";
				;;
			-1)
				_arg_COLOR="[1;33m";
				;;
			1)
				_arg_COLOR="[0;32m";
				;;
			2)
				_arg_COLOR="[1;36m";
				;;
			3)
				_arg_COLOR="[0;36m";
				;;
			*)
				_arg_COLOR="[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--room)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_room="$2"
				shift
				;;
			--room=*)
				_arg_room="${_key##--room=}"
				;;
			
			--sensor)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_sensor="$2"
				shift
				;;
			--sensor=*)
				_arg_sensor="${_key##--sensor=}"
				;;
			
			--mesure)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_mesure="$2"
				shift
				;;
			--mesure=*)
				_arg_mesure="${_key##--mesure=}"
				;;
			
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			-v|--version)
				print_version;
				exit 0;
				;;
			-v*)
				print_version;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string=""
	if [ "${_positionals_count}" -gt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 0 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').
	${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 0 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 0 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "	room: ${_arg_room}";
	echo -e "	sensor: ${_arg_sensor}";
	echo -e "	mesure: ${_arg_mesure}";

}

print_version()
{
	echo "";
}

on_interrupt() {
	die Process aborted! 130;
}

parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

case "${_arg_mesure}" in
	temperature)
		fkmin=20
		fkmax=30
	;;
	humidity)
		fkmin=45
		fkmax=60
	;;
	pressure)
		fkmin=96800
		fkmax=96900
	;;
	raw)
		fkmin=0.15
		fkmax=0.42
	;;
	*)
		fkmin=0
		fkmax=999999
	;;
esac

# Define a function to generate a random floating-point number between two limits
function random_float() {
  local min="$1"
  local max="$2"
  local precision="${3:-2}"

  # Generate a random integer between 0 and 32767
  local rand_int=$((RANDOM % 32768))

  # Calculate the random floating-point number
  local rand_float=$(echo "scale=${precision}; ${min} + (${max} - ${min}) * ${rand_int} / 32767" | bc)

  # Print the random floating-point number
  echo "${rand_float}"
}

dataLine="${_arg_mesure},room=${_arg_room},sensor=${_arg_sensor} mesure=${_arg_value:-$(random_float "$fkmin"  "$fkmax")} $(date +%s)";
wrCmd=("$_SCRIPT_DIR/influx" --verbose "$_verbose_level" write -b "StationIO" -o "StationIO" -p s "$dataLine");

log "${wrCmd[*]}" 1;
"${wrCmd[@]}";
